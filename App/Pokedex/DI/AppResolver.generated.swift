//
//  Resolver.swift
//  Generated by dikitgen.
//

import APIKit
import DIKit
import Foundation
import ReactiveSwift
import UIKit

extension AppResolver {

    func resolveAPIClient() -> APIClient {
        return provideAPIClient()
    }

    func resolveAPIKitHTTPClient() -> APIKitHTTPClient {
        let session = resolveSession()
        let apiLogger = resolveAPILogger()
        return APIKitHTTPClient.makeInstance(dependency: .init(session: session, apiLogger: apiLogger))
    }

    func resolveAPILogger() -> APILogger {
        return provideAPILogger()
    }

    func resolveAppResolver() -> AppResolver {
        return provideAppResolver()
    }

    func resolveAppRootViewController() -> AppRootViewController {
        let appResolver = resolveAppResolver()
        return AppRootViewController.makeInstance(dependency: .init(resolver: appResolver))
    }

    func resolveDefaultAPIClient() -> DefaultAPIClient {
        let httpClient = resolveHTTPClient()
        return DefaultAPIClient.makeInstance(dependency: .init(httpClient: httpClient))
    }

    func resolveDefaultPokemonRepository() -> DefaultPokemonRepository {
        let apiClient = resolveAPIClient()
        return DefaultPokemonRepository.makeInstance(dependency: .init(apiClient: apiClient))
    }

    func resolveHTTPClient() -> HTTPClient {
        return provideHTTPClient()
    }

    func resolveMainViewController() -> MainViewController {
        let appResolver = resolveAppResolver()
        return MainViewController.makeInstance(dependency: .init(resolver: appResolver))
    }

    func resolvePokemonListCellViewModel(pokemon: PokemonListItem) -> PokemonListCellViewModel {
        return PokemonListCellViewModel.makeInstance(dependency: .init(pokemon: pokemon))
    }

    func resolvePokemonListUseCase() -> PokemonListUseCase {
        let pokemonRepository = resolvePokemonRepository()
        return PokemonListUseCase.makeInstance(dependency: .init(pokemonRepository: pokemonRepository))
    }

    func resolvePokemonListViewController() -> PokemonListViewController {
        let pokemonListViewModel = resolvePokemonListViewModel()
        return PokemonListViewController.makeInstance(dependency: .init(viewModel: pokemonListViewModel))
    }

    func resolvePokemonListViewModel() -> PokemonListViewModel {
        let pokemonListUseCase = resolvePokemonListUseCase()
        return PokemonListViewModel.makeInstance(dependency: .init(pokemonListUseCase: pokemonListUseCase))
    }

    func resolvePokemonRepository() -> PokemonRepository {
        return providePokemonRepository()
    }

    func resolveSession() -> Session {
        return provideSession()
    }

    func resolveSplashViewController() -> SplashViewController {
        return SplashViewController.makeInstance(dependency: .init())
    }

    func resolveUserDefaults() -> UserDefaults {
        return provideUserDefaults()
    }

}

